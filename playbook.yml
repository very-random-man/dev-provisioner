- hosts: 127.0.0.1
  connection: local

  vars_prompt:
    - name: "ansible_become_pass"
      prompt: "[sudo] password for {{ lookup('env','USER') }}"
    - name: "ssh_key_passphrase"
      prompt: "Please enter id_rsa SSH key passphrase"

  tasks:
       
    - name: Source .profile
      expect:
        command: /bin/bash -c "source /home/{{ lookup('env','USER') }}/.profile"
        responses:
          passphrase: "{{ ssh_key_passphrase }}\n"
      # no_log: true   

      
    # - name: Source .profile
    #   shell: source ~/.profile
    #   args:
    #     executable: /bin/bash

    - name: Ensure wsl.conf exists
      become: yes
      copy:
        content: ""
        dest: /etc/wsl.conf
        force: no
        group: root
        owner: root
        mode: 0644

    - name: Update wsl.conf
      become: yes
      blockinfile:
        path: /etc/wsl.conf
        block: "{{ wsl_conf }}"

    - name: Ensure .gitconfig exists
      copy:
        content: ""
        dest: ~/.gitconfig
        force: no
        mode: 0644

    - name: Update .gitconfig
      blockinfile:
        path: /home/{{ lookup('env','USER') }}/.gitconfig
        block: "{{ gitconfig }}"

    # - name: Create a symbolic link to WINHOME
    #   file:
    #     src: "{{ lookup('env','WINHOME') }}"
    #     dest: ~/winhome
    #     state: link

    - name: Check if ~/.ssh exists
      stat:
        path: ~/.ssh
      register: ssh_check

    - name: Check if ~/.ssh/id_rsa key exists
      stat:
        path: ~/.ssh/id_rsa
      register: ssh_key_check

    - name: Check if $WINHOME/.ssh exists
      stat:
        path: "{{ lookup('env','WINHOME') }}/.ssh"
      register: winssh_check

    - name: Check if $WINHOME/.ssh/id_rsa exists
      stat:
        path: "{{ lookup('env','WINHOME') }}/.ssh/id_rsa"
      register: winssh_key_check 

    - name: "No SSH keys exist in $WINHOME or ~/.ssh"
      when: not winssh_key_check.stat.exists and not ssh_key_check.stat.exists
      block: 
      # - name:  "No SSH keys exist in $WINHOME or ~/.ssh :: Enter passphrase"
        # pause:
        #   prompt: "Please enter a passphrase for a new SSH key."
        #   echo: no
        # register: ssh_key_passphrase
      - name: "No SSH keys exist in $WINHOME or ~/.ssh :: Create SSH key in ~/.ssh"
        no_log: true
        user:
          name: "{{ lookup('env','USER') }}"
          generate_ssh_key: yes
          ssh_key_passphrase: "{{ ssh_key_passphrase }}"

      - name: "No SSH keys exist in $WINHOME or ~/.ssh :: Copy SSH key to $WINHOME/.ssh"
        copy:
          src: ~/.ssh/
          dest: "{{ lookup('env','WINHOME') }}/.ssh"
          remote_src: yes
        
    - name: "SSH keys exist in $WINHOME but not in ~/.ssh :: Copy SSH key to ~/.ssh"
      copy:
        src: "{{ lookup('env','WINHOME') }}/.ssh/"
        dest: ~/.ssh
        remote_src: yes
      when: winssh_key_check.stat.exists and not ssh_key_check.stat.exists

    - name: "SSH keys exist in ~/.ssh but not in $WINHOME :: Copy SSH key to $WINHOME/.ssh"
      copy:
        src: ~/.ssh/
        dest: "{{ lookup('env','WINHOME') }}/.ssh"
        remote_src: yes
      when: not winssh_key_check.stat.exists and ssh_key_check.stat.exists

    - name: Install keychain
      become: yes
      package:
        name: keychain
        state: present

    - name: Install pexpect
      become: yes
      package:
        name: python-pexpect
        state: present

    - name: Updating .profile
      blockinfile:
        path: /home/{{ lookup('env','USER') }}/.profile
        block: "{{ profile }}"

    # - name: Set keychain.
    #   expect:
    #     command: /bin/bash -c "/usr/bin/keychain $HOME/.ssh/id_rsa"
    #     responses:
    #       passphrase: "{{ ssh_key_passphrase }}\n"
    #   no_log: true

    # - name: Apply Keychain settings.
    #   shell: source $HOME/.keychain/{{ lookup('env','NAME') }}-sh
    #   args:
    #     executable: /bin/bash

    # - name: Source .profile
    #   shell: source ~/.profile
    #   # no_log: true
    #   args:
    #     executable: /bin/bash
    #   #   stdin: "{{ ssh_key_passphrase }}"
    #   #   stdin_add_newline: yes



    - name: Install Galaxy Roles in the requirements.yml file
      local_action:
        command ansible-galaxy install \
          --force \
          --keep-scm-meta \
          -r {{ playbook_dir }}/requirements.yml \
          --roles-path={{ playbook_dir }}/roles
      when: skip_roles != "yes"
      
    - name: Make sure the roles directory is being git ignored
      shell: printf "*\n!.gitignore" > {{ playbook_dir }}/roles/.gitignore

    - name: Install and configure Unison to sync ~/.ssh and $WINHOME/.ssh
      include_role:
        name: weareinteractive.unison
      vars:
        unison_configs:
          - name: sync-ssh-keys
            src: "{{ lookup('env','WINHOME') }}/.ssh"
            dest: "/home/{{ lookup('env','USER') }}/.ssh"
            batch: yes
        unison_user: "{{ lookup('env','USER') }}"
        ansible_become: yes

    - name: Install Apache
      include_role:
        name: geerlingguy.apache
      vars:
        ansible_become: yes

    - name: Install PHP versions
      include_role:
        name: geerlingguy.php-versions
      vars:
        ansible_become: yes

    - name: Install PHP  
      include_role:
        name: geerlingguy.php
      vars:
        ansible_become: yes

    - name: Install Apache PHP FPM
      include_role:
        name: geerlingguy.apache-php-fpm
      vars:
        ansible_become: yes

    - name: Install Composer  
      include_role:
        name: geerlingguy.composer
      vars:
        ansible_become: yes

    - name: Install npm  
      include_role:
        name: robertdebock.npm
      vars:
        ansible_become: yes

    - name: Install yarn  
      include_role:
        name: oefenweb.yarn
      vars:
        ansible_become: yes

    - name: Install vagrant
      include_role:
        name: andrewrothstein.vagrant
      vars:
        ansible_become: yes

    - name: Install Docker  
      register: docker_result
      include_role:
        name: geerlingguy.docker
      vars:
        ansible_become: yes

    # - name: Install virtualbox
    #   include_role:
    #     name: oefenweb.virtualbox
    #   vars:
    #     ansible_become: yes

    - name: Reset ssh connection to group change immediately applies.
      meta: reset_connection
      ignore_errors: True

    - name: Log into docker group
      shell: newgrp ; exit
      when: not docker_result is skipped

    - name: Check if Lando is installed
      stat:
        path: /usr/local/bin/lando
      register: lando_check

    - name: Install Lando package from github
      become: yes
      apt:
        deb: "https://github.com/lando/lando/releases/download/{{ lando_version }}/lando-{{ lando_version }}.deb"
      when: not lando_check.stat.exists

    - name: Stop service apache2 so docker will run.
      become: yes
      service:
        name: apache2
        state: stopped